/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface WatchOptions {
  recursive?: boolean;
}
/** Watcher kind enumeration */
export const enum WatcherKind {
  /** inotify backend (linux) */
  Inotify = 'Inotify',
  /** FS-Event backend (mac) */
  Fsevent = 'Fsevent',
  /** KQueue backend (bsd,optionally mac) */
  Kqueue = 'Kqueue',
  /** Polling based backend (fallback) */
  PollWatcher = 'PollWatcher',
  /** Windows backend */
  ReadDirectoryChangesWatcher = 'ReadDirectoryChangesWatcher',
  /** Fake watcher for testing */
  NullWatcher = 'NullWatcher',
  Unknown = 'Unknown',
}
export function watch(
  p: string,
  options?: WatchOptions | undefined | null
): FSWatcher;
export class Subscription {
  toString(): string;
  unsubscribe(): void;
}
export type FSWatcher = FsWatcher;
export class FsWatcher {
  get kind(): WatcherKind;
  toString(): string;
  subscribe(
    callback: (event: import('./event').NotifyEvent) => void,
    errorCallback?: (err: Error) => void
  ): Subscription;
  close(): void;
}
